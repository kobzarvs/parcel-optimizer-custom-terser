{"mappings":";;AA2BA,wBA0DG","sources":["packages/parcel-optimizer-custom-terser/src/src/index.ts","packages/parcel-optimizer-custom-terser/src/index.ts"],"sourcesContent":[null,"import {Optimizer} from '@parcel/plugin';\nimport {\n  CompressOptions,\n  ECMA,\n  FormatOptions,\n  MangleOptions, ManglePropertiesOptions,\n  minify,\n  MinifyOptions,\n  ParseOptions, SimpleIdentifierMangler,\n  SourceMapOptions, WeightedIdentifierMangler,\n} from 'terser';\nimport SourceMap from '@parcel/source-map';\nimport {Async, Blob, BundleGraph, BundleResult, NamedBundle, PluginLogger, PluginOptions} from '@parcel/types';\nimport {RawSourceMap} from 'source-map';\n\n\ninterface OptimizeArgs<ConfigType> {\n  bundle: NamedBundle;\n  bundleGraph: BundleGraph<NamedBundle>;\n  contents: Blob;\n  map: SourceMap | null | undefined;\n  options: PluginOptions;\n  logger: PluginLogger;\n  config: ConfigType;\n  getSourceMapReference: (map: SourceMap | null | undefined) => Async<string | null | undefined>;\n}\n\nexport default new Optimizer({\n  async optimize(args): Promise<BundleResult> {\n    const {\n      bundle,\n      contents,\n      map,\n      logger,\n    } = args;\n\n    logger.info({message: `processing bundle '${bundle.name}'`});\n\n    const minifyOptions: MinifyOptions = {\n      compress: false, //boolean | CompressOptions;\n      ecma: 2020,\n      ie8: false,\n      keep_classnames: undefined,\n      keep_fnames: false,\n      module: true,\n      safari10: false,\n      sourceMap: {\n        includeSources: true,\n        filename: bundle.name,\n        url: bundle.name + '.map',\n      },\n      toplevel: true,\n    };\n\n    const result = await minify(contents as string, minifyOptions);\n    // const result = await minify(contents as string, {sourceMap: true});\n\n    const rawMap = JSON.parse(result.map as string) as RawSourceMap;\n    console.log('result.map', typeof result.map, result.map);\n\n    if (map) {\n      const vlq = map.toVLQ();\n      Object.assign(vlq, {\n        mappings: rawMap.mappings,\n        names: rawMap.names\n      });\n      map.addVLQMap(vlq);\n\n      // let sourceMap;\n      // if (rawMap) {\n      //   sourceMap = SourceMap.generateEmptyMap({\n      //     projectRoot: vlq.sourceRoot!,\n      //     sourceName: bundle.name,\n      //     sourceContent: rawMap.sourcesContent?.join('\\n') || ''\n      //   });\n      //   sourceMap.addNames(rawMap.names);\n      //   sourceMap.\n      // }\n    }\n\n    return {\n      map,\n      contents: result.code as string,\n    };\n  },\n});\n"],"names":[],"version":3,"file":"types.d.ts.map"}